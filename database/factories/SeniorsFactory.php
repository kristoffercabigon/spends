<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class SeniorsFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $age = $this->faker->numberBetween(60, 100);

        $birthdate = now()->subYears($age)->toDateString();

        $filipinoStreet = [
            'Maligaya Street',
            'Mabait Drive',
            'Malolos Avenue',
            'Daisy Road',
            'Camia Boulevard',
            'Sampaguita Street',
            'Rosal Drive',
            'Ruby Avenue',
            'Emerald Boulevard',
            'Gemini Street',
            'Sunflower Drive',
            'Tulip Road',
            'Jade Avenue',
            'Pearl Boulevard',
            'Santos Street',
            'Magnolia Avenue',
            'Ilang-Ilang Drive',
            'Waling-Waling Boulevard',
            'Champaca Street',
            'Dama de Noche Avenue',
            'Venus Road',
            'Saturn Street',
            'Mars Drive',
            'Orion Boulevard',
            'Aurora Avenue',
            'Luna Street',
            'Kalayaan Drive',
            'Masaya Road',
            'Pag-asa Street',
            'Matahimik Avenue',
            'Makisig Boulevard',
            'Marangal Drive',
            'Magiting Street',
            'Mabuhay Road',
            'Mapayapa Avenue',
            'Matatag Drive',
            'Matapat Boulevard',
            'Matamis Street',
            'Mahinhin Drive',
            'Maharlika Avenue',
            'Anahaw Road',
            'Acacia Street',
            'Yakal Boulevard',
            'Narra Drive',
            'Kamagong Street',
            'Molave Avenue',
            'Banaba Road',
            'Talisay Drive',
            'Santol Street',
            'Mangga Avenue',
            'Bayabas Drive',
            'Makopa Street',
            'Kalamansi Road',
            'Atis Drive',
            'Langka Street',
            'Papaya Boulevard',
            'Guyabano Avenue',
            'Siniguelas Drive',
            'Avocado Street',
            'Chico Road',
            'Guava Drive',
            'Balete Boulevard',
            'Pineapple Avenue',
            'Cherry Drive',
            'Rambutan Street',
            'Dalandan Road',
            'Jasmine Street',
            'Azucena Drive',
            'Gardenia Boulevard',
            'Lily Avenue',
            'Poinsettia Street',
            'Gumamela Drive',
            'Hydrangea Road',
            'Bluebell Boulevard',
            'Iris Avenue',
            'Violeta Street',
            'Zinnia Drive',
            'Carnation Road',
            'Hibiscus Boulevard',
            'Marigold Street',
            'Cosmos Drive',
            'Petunia Road',
            'Lavender Avenue',
            'Rose Street',
            'Gladiola Boulevard',
            'Peridot Avenue',
            'Topaz Street',
            'Amethyst Drive',
            'Opal Road',
            'Diamond Boulevard',
            'Sapphire Street',
            'Garnet Drive',
            'Turquoise Road',
            'Citrine Avenue',
            'Amber Street',
            'Coral Boulevard',
            'Onyx Drive',
            'Aquamarine Avenue',
            'Silver Street',
            'Gold Boulevard'
        ];

        $philippineCities = [
            'Caloocan City',
            'Quezon City',
            'Manila',
            'Cebu City',
            'Davao City',
            'Zamboanga City',
            'Baguio City',
            'Iloilo City',
            'Taguig City',
            'Cavite City',

            'General Santos City',
            'Makati City',
            'Pasig City',
            'Marikina City',
            'San Juan City',
            'Las Piñas City',
            'Parañaque City',
            'Malabon City',
            'Navotas City',
            'Mandaluyong City',

            'Calamba City',
            'Bacoor City',
            'Cagayan de Oro City',
            'Lapu-Lapu City',
            'Angeles City',
            'San Fernando City (Pampanga)',
            'Tarlac City',
            'San Carlos City (Pangasinan)',

            'Iligan City',
            'Digos City',
            'Tacloban City',
            'Tagum City',
            'Puerto Princesa City',
            'Ormoc City',
            'Bayugan City',
            'Dipolog City',
            'Marawi City',
            'Cotabato City',

            'Legazpi City',
            'Naga City',
            'Cabanatuan City',
            'Santiago City',
            'Tuguegarao City',
            'San Jose City (Occidental Mindoro)',
            'San Jose del Monte City',
            'Mandaue City',
            'Dumaguete City',
            'Calapan City',
        ];

        $houseNumber = $this->faker->numberBetween(1000, 9999);
        $phase = 'Phase ' . $this->faker->numberBetween(1, 10);
        $block = 'Block ' . $this->faker->numberBetween(1, 90);
        $lot = 'Lot ' . $this->faker->numberBetween(1, 90);
        $barangayNo = $this->faker->numberBetween(1, 25);
        $filipinoStreet = $this->faker->randomElement($filipinoStreet);
        $address = "{$houseNumber} {$phase} {$block} {$lot} {$filipinoStreet}, Brgy. {$barangayNo}, Caloocan City";

        $maleNames = [
            'John',
            'Mark',
            'Michael',
            'James',
            'Robert',
            'William',
            'David',
            'Richard',
            'Joseph',
            'Charles',
            'Thomas',
            'Daniel',
            'Matthew',
            'Anthony',
            'Donald',
            'Paul',
            'Andrew',
            'Joshua',
            'Samuel',
            'Kevin',
            'Brian',
            'George',
            'Edward',
            'Ronald',
            'Jack',
            'Jason',
            'Justin',
            'Larry',
            'Scott',
            'Eric',
            'Stephen',
            'Timothy',
            'Daniel',
            'Adam',
            'Nathan'
        ];

        $femaleNames = [
            'Mary',
            'Jennifer',
            'Linda',
            'Patricia',
            'Elizabeth',
            'Barbara',
            'Susan',
            'Jessica',
            'Sarah',
            'Margaret',
            'Dorothy',
            'Laura',
            'Helen',
            'Nancy',
            'Karen',
            'Betty',
            'Ruth',
            'Sharon',
            'Kimberly',
            'Deborah',
            'Cynthia',
            'Amy',
            'Angela',
            'Virginia',
            'Diane',
            'Julie',
            'Madison',
            'Sophia',
            'Isabella',
            'Charlotte',
            'Ava',
            'Mia',
            'Emma',
            'Harper',
            'Ella'
        ];

        $filipinoLastNames = [
            'Cabigon',
            'Santiago',
            'Palomares',
            'Tonio',
            'Aquino',
            'Bautista',
            'Cruz',
            'Dela Cruz',
            'Gonzales',
            'Garcia',
            'López',
            'Martinez',
            'Reyes',
            'Santos',
            'Torres',
            'Delos Reyes',
            'Bañez',
            'Flores',
            'Nieves',
            'Salvador',
            'Dizon',
            'Bacani',
            'Velasquez',
            'Cabrera',
            'Pascual',
            'Villanueva',
            'Alvarez',
            'Chua',
            'Sarmiento',
            'Morales',
            'Pineda',
            'Ocampo',
            'Alcantara',
            'Cortez',
            'Alvarado',
            'Mendoza',
            'Labrador',
            'Salinas',
            'Castañeda',
            'De Leon',
            'Vera',
            'Magsaysay',
            'Dela Torre',
            'Ponce',
            'Suarez',
            'Valenzuela',
            'Aguilar',
            'Ramos',
            'Cruzado',
            'Esteban',
            'Sison',
            'Tiongson',
            'San Antonio',
            'Dela Cruz',
            'Del Mundo',
            'De Guzman',
            'De Jesus',
            'De Leon',
            'Delos Santos',
            'De Vera',
            'San Miguel',
            'San Juan',
            'San Pedro',
            'De Ocampo',
            'Del Rosario',
            'De la Torre',
            'De la Cruz',
            'San Vicente',
            'Del Castillo',
            'De la Vega',
            'Bautista',
            'Cruz',
            'Mendoza',
            'Martinez',
            'Riviera',
            'Salas',
            'Rocamora',
            'Santos',
            'Tabujara',
            'Verano',
            'Villanueva',
            'Castillo',
            'Martelino',
            'Misa',
            'Naguit',
            'Alcaraz',
            'Alfonso',
            'Arroyo',
            'Atienza',
            'Bañez',
            'Cabarroguis',
            'Esguerra',
            'Manalo',
            'Matias',
            'Ramos',
            'Villafuerte',
            'Yap',
            'Zaragoza',
            'De Guzman',
            'De la Rosa',
            'Delos Reyes',
            'De Guzman',
            'De Villa',
            'Gumabay',
            'Lacuna',
            'Macapagal',
            'Manalaysay',
            'Natividad',
            'Rosales',
            'Soriano',
        ];

        $otherArrangements = [
            'Living with Extended Family',
            'Living with Non-relatives',
            'Living in a Shared Rental Property',
            'Living Temporarily in a Shelter',
            'Living in a Boarding House/Dormitory',
            'Living in a Residential Care Facility',
            'Co-living Spaces',
            'Living in a Hostel or Temporary Accommodation',
            'Living in a Commune or Cooperative Housing',
            'Living Independently in Mobile Housing',
            'Living as a Nomad',
            'Living with a Foster Family',
            'Living with a Legal Guardian',
            'Incarcerated or Detained',
            'Institutional Living',
        ];

        $existing_illness = [
            'Hypertension',
            'Diabetes',
            'Arthritis',
            'Heart disease',
            'Chronic obstructive pulmonary disease (COPD)',
            'Dementia',
            'Alzheimer disease',
            'Osteoporosis',
            'Cancer',
            'Kidney disease',
            'Stroke',
            'Parkinson disease',
            'Depression',
            'Anxiety disorders',
            'Vision impairment',
            'Hearing loss',
            'Chronic pain conditions',
            'Gastroesophageal reflux disease (GERD)',
            'Hypothyroidism'
        ];

        $Receiving_pension = [
            1000,
            1500,
            2000,
            2500,
            3000,
            3500,
            4000,
            4500,
            5000,
            5500,
            6000,
            6500,
            7000,
            7500,
            8000,
            8500,
            9000,
            9500,
            10000,
            11000,
            12000,
            13000,
            14000,
            15000,
            16000,
            17000,
            18000,
            19000,
            20000
        ];

        $if_cash = [
            1000,
            1500,
            2000,
            2500,
            3000,
            3500,
            4000,
            4500,
            5000,
            5500,
            6000,
            6500,
            7000,
            7500,
            8000,
            8500,
            9000,
            9500,
            10000,
            10500,
            11000,
            11500,
            12000,
            12500,
            13000,
            13500,
            14000,
            14500,
            15000,
            15500,
            16000,
            16500,
            17000,
            17500,
            18000,
            18500,
            19000,
            19500,
            20000,
        ];

        $specific_support = [
            'Regular financial assistance',
            'Assistance with medical bills',
            'Help with daily living activities',
            'Transportation to appointments',
            'Grocery shopping assistance',
            'Housekeeping services',
            'Home repairs and maintenance',
            'Social visits and companionship',
            'Meals prepared by family',
            'Caregiving during illness',
            'Payment of utility bills',
            'Assistance with technology (e.g., setting up devices)',
            'Monitoring health and wellness',
            'Emotional support and counseling'
        ];

        $pension_sources = [
            "Pension from Private Corporations",
            "Pag-IBIG Fund (Home Development Mutual Fund)",
            "Retirement Benefits from the Philippine National Police (PNP)",
            "Retirement Benefits from the Bureau of Fire Protection (BFP)",
            "Retirement Benefits from Local Government Units (LGUs)",
            "Overseas Filipino Workers (OFW) Pension Plans",
            "Retirement Plans from Insurance Companies",
            "Corporate Employee Pension Plans",
            "Cooperative Pension Funds"
        ];

        $senior_permanent_income_sources = [
            "Business",
            "Social Security Benefits",
            "Investment Income",
            "Rental Income from Properties",
            "Annuities",
            "Royalties from Intellectual Property",
            "Government Assistance Programs",
            "Family Support or Allowances",
            "Income from Cooperative Memberships"
        ];

        $has_illness = $this->faker->numberBetween(0, 1);
        $regularSupport = $this->faker->numberBetween(0, 1);
        $permanent_source = $this->faker->numberBetween(0, 1);
        $pensioner = $this->faker->numberBetween(0, 1);
        $type_of_living_arrangement = $this->faker->numberBetween(1, 5);
        $isMale = $this->faker->boolean();
        $firstName = $isMale ? $this->faker->randomElement($maleNames) : $this->faker->randomElement($femaleNames);
        $sex = $isMale ? 1 : 2;

        return [
            'first_name' => $firstName,
            'middle_name' => $this->faker->randomElement($filipinoLastNames),
            'last_name' => $this->faker->randomElement($filipinoLastNames),
            'suffix' => $this->faker->suffix(),
            'citizenship_id' => $this->faker->numberBetween(1, 191),
            'birthdate' => $birthdate,
            'age' => $age,
            'birthplace' => $this->faker->randomElement($philippineCities),
            'sex_id' => $sex,
            'civil_status_id' => $this->faker->numberBetween(1, 4),
            'address' => $address,
            'barangay_id' => $barangayNo,
            'valid_id' => null,
            'profile_picture' => null,
            'indigency' => null,
            'signature' => null,
            'hospitalized_6' => $this->faker->numberBetween(0, 1),
            'type_of_living_arrangement' => $type_of_living_arrangement,
            'other_arrangement_remark' => $type_of_living_arrangement == 5 ? $this->faker->randomElement($otherArrangements) : null,
            'pensioner' => $pensioner,
            'if_pensioner_yes' => $pensioner == 1 ? $this->faker->randomElement($Receiving_pension) : null,
            'permanent_source' => $permanent_source,
            'if_permanent_yes' => $permanent_source == 1 ? $this->faker->randomElement($senior_permanent_income_sources) : null,
            'regular_support' => $regularSupport,
            'if_cash' => $regularSupport == 1 ? $this->faker->randomElement($if_cash) : null,
            'specific_support' => $regularSupport == 1 ? $this->faker->randomElement($specific_support) : null,
            'has_illness' => $has_illness,
            'if_illness_yes' => $has_illness == 1 ? $this->faker->randomElement($existing_illness) : null,
            'email' => strtolower($firstName . '.' . $this->faker->randomNumber(3) . '.' . $this->faker->randomElement($filipinoLastNames) . '@example.com'),
            'password' => Hash::make('password'),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn(array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
